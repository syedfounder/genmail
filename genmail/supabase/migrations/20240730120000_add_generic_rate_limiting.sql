-- Migration: Add Generic Rate Limiting
-- PRD Section 6: Privacy & Abuse Prevention
-- Implement a generic rate limiting system for various API actions.

-- ====================================
-- GENERIC RATE LIMITING INFRASTRUCTURE
-- ====================================

-- Create a table to store various rate-limited events
CREATE TABLE public.rate_limit_events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_type TEXT NOT NULL,
    key TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Create an index for efficient querying of events by type, key, and time.
CREATE INDEX idx_rate_limit_events_type_key_created_at 
ON public.rate_limit_events(event_type, key, created_at DESC);

-- ====================================
-- GENERIC RATE LIMITING FUNCTIONS
-- ====================================

-- Function to check if a specific key has exceeded the rate limit for an event type.
-- It records the event first, then checks the count.
CREATE OR REPLACE FUNCTION public.is_rate_limited(
    p_event_type TEXT,
    p_key TEXT,
    p_limit_count INT,
    p_time_window INTERVAL
)
RETURNS BOOLEAN AS $$
DECLARE
    event_count INT;
BEGIN
    -- Record the current event
    INSERT INTO public.rate_limit_events (event_type, key)
    VALUES (p_event_type, p_key);

    -- Count recent events
    SELECT COUNT(*) INTO event_count
    FROM public.rate_limit_events
    WHERE event_type = p_event_type
      AND key = p_key
      AND created_at > NOW() - p_time_window;

    -- Return true if the count exceeds the limit
    RETURN event_count > p_limit_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- ====================================
-- ROW LEVEL SECURITY POLICIES
-- ====================================

-- Enable RLS on the new table
ALTER TABLE public.rate_limit_events ENABLE ROW LEVEL SECURITY;

-- Allow service roles to perform any action (used by our API)
CREATE POLICY "Allow service role access" 
ON public.rate_limit_events
FOR ALL
USING (auth.role() = 'service_role');


-- ====================================
-- COMMENTS AND DOCUMENTATION
-- ====================================

COMMENT ON TABLE public.rate_limit_events IS 'Stores event occurrences for generic rate limiting.';
COMMENT ON FUNCTION public.is_rate_limited(TEXT, TEXT, INT, INTERVAL) IS 'Records an event and checks if the rate limit for that event type and key has been exceeded.'; 